version: '3.8'

# This Docker Compose file sets up a secure microservices architecture.
# The 'nginx' service acts as the single entry point (reverse proxy).
# All other services have their ports removed, so they are not directly
# accessible from the public internet.

services:
  # 1. The Nginx Reverse Proxy (Public Facing)
  nginx:
    build: ./nginx
    container_name: nginx_reverse_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs
    depends_on:
      - frontend
      - db_api
      - auth_api
      - event-service
      - user-portal-service
      - participation-service
    networks:
      - app-network

  # --- Backend and Frontend Services (Internal Only) ---

  frontend: # This is your Landing Page Service
    build:
      context: ./Frontend
    container_name: frontend_container
    restart: unless-stopped
    environment:
      - FLASK_RUN_PORT=8080
      # Use the HOST_IP_OR_DOMAIN variable for external URLs
      - AUTH_SERVICE_LOGIN_URL=https://${HOST_IP_OR_DOMAIN}/auth/
      - EVENT_SERVICE_URL=https://${HOST_IP_OR_DOMAIN}/events/
    networks:
      - app-network

  db_api:
    build: ./app_db
    container_name: db_api_container
    restart: unless-stopped
    volumes:
      - db_data:/app/data
    networks:
      - app-network

  auth_api:
    build: ./Auth_Serv
    container_name: auth_api_container
    restart: unless-stopped
    environment:
      - DB_API_URL=http://db_api:5004 # Internal Docker network URL - no change
      - FLASK_SECRET_KEY=test12
      - FLASK_SCRIPT_NAME=/auth
      # Use the HOST_IP_OR_DOMAIN variable for external portal URLs
      - USER_PORTAL_URL=https://${HOST_IP_OR_DOMAIN}/user-portal
      - ADMIN_PORTAL_URL=https://${HOST_IP_OR_DOMAIN}/admin-portal
    depends_on:
      - db_api
    networks:
      - app-network
  
  event-service:
    build:
      context: ./Event_MS
    container_name: event_service_container
    restart: unless-stopped
    environment:
      - FLASK_RUN_PORT=5000
      - FLASK_SCRIPT_NAME=/events
    volumes:
      - event_db_data:/app/data
    networks:
      - app-network

  user-portal-service:
    build:
      context: ./User_portal_service
    container_name: user_portal_container
    restart: unless-stopped
    environment:
      - FLASK_RUN_PORT=5001
      - FLASK_SCRIPT_NAME=/user-portal
      - DB_API_URL=http://db_api:5004 # Internal Docker network URL - no change
      - EVENT_SERVICE_URL=http://event-service:5000 # Internal Docker network URL - no change
      # Use the HOST_IP_OR_DOMAIN variable for external service URLs
      - AUTH_SERVICE_URL=https://${HOST_IP_OR_DOMAIN}/auth
      - ERS_LANDING_PAGE_URL=https://${HOST_IP_OR_DOMAIN}/ers
    depends_on:
      - db_api
      - event-service
      - auth_api
    networks:
      - app-network

  participation-service: # New Participation Service
      build:
        context: ./participation_serv # Assuming your Flask app is in a folder named Participation_Serv
      container_name: participation_service_container
      restart: unless-stopped
      environment:
        - FLASK_RUN_PORT=5005 # Port your Flask app runs on internally
        - FLASK_SCRIPT_NAME=/participations # This matches the Nginx location block
      volumes:
        - participation_db_data:/app/data # Persistent storage for your SQLite DB
      networks:
        - app-network

  ers-service:
    build:
      context: ./ERS_Serv # NEW: Point to the dedicated ERS service directory
    container_name: ers_service_container
    restart: unless-stopped
    environment:
      - FLASK_RUN_PORT=5007 # ERS now runs on 5007
      - FLASK_SCRIPT_NAME=/ers # NEW: Dedicated script name for ERS
      # Internal Docker network URLs for ERS to communicate with other services
      - DB_API_URL=http://db_api:5004 # ERS talks to DB API
      - EVENT_SERVICE_URL=http://event-service:5000 # ERS talks to Event Service
      - PARTICIPATION_SERVICE_URL=http://participation-service:5005 # ERS talks to Participation Service
      - USER_PORTAL_ROOT_URL=http://frontend:8080 # ERS can link back to the frontend
    depends_on:
      - db_api
      - event-service
      - participation-service
    networks:
      - app-network

volumes:
  db_data:
  event_db_data:
  participation_db_data:

networks:
  app-network:
    driver: bridge
