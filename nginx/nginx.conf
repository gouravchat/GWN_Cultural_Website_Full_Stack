# This file is designed to be placed in /etc/nginx/conf.d/
# It should NOT contain top-level directives like 'user', 'worker_processes', 'events', or 'http { ... }'
# as those are typically defined in the main nginx.conf.

# Upstream definitions for your services within the Docker network
# These names should match the service names in your docker-compose.yml
upstream frontend_service {
    server frontend:8080; # Matches frontend service in docker-compose.yml, internal port 8080
}

upstream auth_service {
    server auth_api:5002; # Matches auth_api service, internal port 5002
}

upstream db_api_service {
    server db_api:5004; # Matches db_api service, internal port 5004
}

# Add upstream for event-service
upstream event_service_backend {
    server event-service:5000; # Assuming your event service is named 'event-service' and listens on port 5000
}

# Upstream for User Portal Service
upstream user_portal_service {
    server user-portal-service:5001; # Matches user-portal-service in docker-compose.yml
}

# Placeholder for Admin Portal Service, adjust if it's a distinct backend accessible via Nginx
# upstream admin_portal_service_backend {
#     server admin-portal-service:5003; # Assuming 'admin-portal-service' on port 5003
# }

# Event Registration Service - KEPT OFF/COMMENTED OUT AS REQUESTED
# upstream event_registration_service_backend {
#     server event-registration-service:5006; # Based on your docker-compose.yml comment
# }


# Redirect all HTTP traffic (port 80) to HTTPS (port 443)
server {
    listen 80;
    listen [::]:80;
    server_name _; # Listen on all hostnames/IPs (your EC2 public IP or domain)
    return 301 https://$host$request_uri;
}

# Main HTTPS server block
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _; # Listen on all hostnames/IPs (your EC2 public IP or domain)

    # SSL Configuration
    # These paths must match the volume mounts in your docker-compose.yml for Nginx container
    # Your docker-compose.yml shows './certs:/etc/nginx/certs:ro'
    ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;

    # Recommended SSL protocols and ciphers for security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!AECDH:!SEED';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;
    ssl_session_tickets off;
    # ssl_dhparam /etc/nginx/certs/dhparam.pem; # Uncomment and generate if you want stronger DH key exchange

    # HSTS (HTTP Strict Transport Security) for improved security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

    # Other useful security headers
    add_header X-Frame-Options "DENY";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";

    # Proxy all root requests to the frontend service
    location / {
        proxy_pass http://frontend_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade; # For WebSockets
        proxy_set_header Connection "upgrade"; # For WebSockets
        proxy_read_timeout 90s; # Adjust as needed
    }

    # Proxy all /auth/ requests to the auth_api service
    location /auth/ {
        proxy_pass http://auth_service/; # Trailing slash ensures correct path mapping
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Prefix /auth; # CRITICAL: Tells Flask its external path
        # Rewrite redirects issued by the auth_service for its main paths
        proxy_redirect http://auth_service/ /auth/;
        proxy_redirect https://auth_service/ /auth/;
    }

    # Explicitly proxy static files for auth_api using a regex
    location ~ ^/auth/static/(.*)$ {
        proxy_pass http://auth_service/static/$1; # Pass the rest of the path after /static/
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Prefix /auth; # Still needed for consistency within static block
        proxy_redirect http://auth_service/static/ /auth/static/;
        proxy_redirect https://auth_service/static/ /auth/static/;
    }

    # Proxy requests for the event service (not prefixed by /user-portal/api/)
    # This location handles requests directly to /events/ from landing page
    location /events/ {
        proxy_pass http://event_service_backend/; # Proxy to the event service upstream
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy requests for the User Portal's main page (e.g., /user-portal/portal/123)
    # The Flask app expects the full /user-portal/portal/<id> path internally.
    location ~ ^/user-portal/portal/(.*)$ {
        proxy_pass http://user_portal_service/user-portal/portal/$1; # Send the full prefixed path
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Prefix /user-portal; # Tell Flask its external path
        proxy_redirect http://user_portal_service/portal/ /user-portal/portal/;
        proxy_redirect https://user_portal_service/portal/ /user-portal/portal/;
    }

    # Proxy for User Portal Logout (e.g., /user-portal/logout)
    # The Flask app expects the full /user-portal/logout path internally.
    location /user-portal/logout {
        proxy_pass http://user_portal_service/user-portal/logout; # Pass the exact path Flask expects
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Prefix /user-portal; # Tell Flask its external path
    }

    # Proxy static files for the User Portal service (e.g., /user-portal/static/style.css)
    # The Flask app expects the full /user-portal/static/<file> path internally.
    location ~ ^/user-portal/static/(.*)$ {
        proxy_pass http://user_portal_service/user-portal/static/$1; # Pass the full prefixed path to Flask
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Prefix /user-portal; # Still needed for consistency
        proxy_redirect http://user_portal_service/user-portal/static/ /user-portal/static/;
        proxy_redirect https://user_portal_service/user-portal/static/ /user-portal/static/;
    }

    # Proxy API calls from User Portal for user profile (db_api)
    # Requests from browser: /user-portal/api/users/123
    # Nginx strips /user-portal/api/ and maps to /users/$1 on db_api
    location ~ ^/user-portal/api/users/(.*)$ {
        proxy_pass http://db_api_service/users/$1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy API calls from User Portal for events (event-service)
    # Requests from browser: /user-portal/api/events
    # Nginx strips /user-portal/api/ and maps to /events on event-service
    location ~ ^/user-portal/api/events(.*)$ {
        proxy_pass http://event_service_backend/events$1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy requests for the DB API service (e.g., from landing page, without /user-portal prefix)
    location /api/users/ {
        proxy_pass http://db_api_service/users/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Event Registration Service - KEPT OFF/COMMENTED OUT AS REQUESTED
    # location /event-registration/ {
    #     proxy_pass http://event_registration_service_backend/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }


    # Placeholder for Admin Portal Service, adjust if it's a distinct service
    # location /admin-portal/ {
    #    proxy_pass http://admin_portal_service_backend/;
    #    proxy_set_header Host $host;
    #    proxy_set_header X-Real-IP $remote_addr;
    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # Basic error page configuration
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html; # Default Nginx error page location
        internal;
    }
}
